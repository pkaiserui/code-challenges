{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red16\green21\blue28;\red122\green69\blue204;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl340\sa200\qc\partightenfactor0

\f0\b\fs32 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 The "Busiest Time in The Mall" Problem\kerning1\expnd0\expndtw0 \ulnone \
\pard\pardeftab720\sl390\sa200\partightenfactor0

\b0\fs26 \cf2 \expnd0\expndtw0\kerning0
The mall management is trying to figure out what was the busiest moment in the mall in the last year.\uc0\u8232 You are given data from the door detectors: each data entry includes a timestamp (seconds in {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Unix_time"}}{\fldrslt \cf3 \strokec3 Unix Epoch}} format), an amount of people and whether they entered or exited.\uc0\u8232 \u8232 Example of a data entry:\u8232 \{ 
\b time
\b0 : 1440084737,\'a0 
\b count
\b0 : 4,\'a0 
\b type
\b0 : "enter" \}\uc0\u8232 \u8232 
\b Find what was the busiest period in the mall on the last year. Return an array with two {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Unix_time"}}{\fldrslt 
\b0 \cf3 \strokec3 Epoch}} timestamps representing the beginning and end of that period.
\b0  You may assume that the data your are given is accurate and that each second with entries or exists is recorded. Implement the most efficient solution possible and analyze its time and space complexity.\
function findBusiestPeriod(data):\
   if (data == NULL OR length(data) == 0):\
      return NULL\
\
   data.sort(time) #implement on your language\
   n = data(length)\
   \
   count = 0\
   maxCount = 0\
   maxPeriod = [0,0]\
   for i from 0 to n-1:\
      #update count:\
      if (data[i].type == "enter"):\
         count += data[i].count\
      else if (data[i].type == "exit"):\
         count -= data[i].count\
\
      #check for other entry with same time:\
      if (i < n-1 AND data[i].time == data[i+1].time):\
         continue\
\
      #update maximum\
      if (count > maxCount):\
         maxCount = count\
         maxPeriod[0] = data[i].time\
         if (i < n-1):\
            maxPeriod[1]= data[i+1].time\
         else:\
            maxPeriod[1] = data[i].time\
   return maxPeriod}